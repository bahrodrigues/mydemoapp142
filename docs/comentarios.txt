Teste Mobile
--> testes de aplicativos para celulares e tablets
--> também de aplicativos para relogio, central de midia, smart tv

Vamos usar o framework Appium
- funciona para android e IOS
- é uma vertente do selenium webdriver voltaada para teste de Appium
- multiplos sistemas operacionais
- multiplas linguagens de programação:
    - java
    - javascript
    - python
    - C#

Tipos de aplicativos
- WebApp (site disfarçado de app)
- Nativo - um projeto separado para android e outro para IOS
- Hibrido - um projeto gera apps para android e IOS

Requsitos de Hardware
- Processador Intel i5 ou i7
- Familia do processados 12-->2022, 13--> 2023, 14-->2024
- Memoria RAM: 8 Gb --> 16 Gb
- Placa de video offboard
- Disco Rigido: SSD (pelo menos o boot)

Ambiente de teste em nuvem = Device Farms
- SauceLabs --> criar uma conta 
- BrowserStack
- Perfecto

Roteiro de inspeção
- Instalar o app alvo e o Apk Info
- usar o Apk Info para descobrir:
appPackage: com.saucelabs.mydemoapp.android
appActivity: com.saucelabs.mydemoapp.android.view.activities.SplashActivity
ou com.saucelabs.mydemoapp.android.view.activities.MainActivity


// This sample code supports Appium Java client >=9
// https://github.com/appium/java-client
import io.appium.java_client.remote.options.BaseOptions;
import io.appium.java_client.android.AndroidDriver;
import java.net.URL;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.*;

public class SampleTest {

  private AndroidDriver driver;

  @BeforeEach
  public void setUp() {
    var options = new BaseOptions()
      .amend("platformName", "Android")
      .amend("appium:platformVersion", "9.0")
      .amend("appium:deviceName", "Samsung Galaxy S9 FHD GoogleAPI Emulator")
      .amend("appium:deviceOrientation", "portrait")
      .amend("appium:app", "storage:filename=mda-2.2.0-25.apk")
      .amend("appium:appPackage", "com.saucelabs.mydemoapp.android")
      .amend("appium:appActivity", "com.saucelabs.mydemoapp.android.view.activities.SplashActivity")
      .amend("appium:automationName", "UiAutomator2")
      .amend("browserName", "")
      .amend("appium:ensureWebviewsHavePages", true)
      .amend("appium:nativeWebScreenshot", true)
      .amend("sauce:options", Map.ofEntries(Map.entry("name", "Appium Desktop Session -- Nov 19, 2024 9:16 PM")))
      .amend("appium:newCommandTimeout", 3600)
      .amend("appium:connectHardwareKeyboard", true);

    private URL getUrl() {
      try {
        return new URL("http://ondemand.us-west-1.saucelabs.com:80/wd/hub");
      } catch (MalformedURLException e) {
        e.printStackTrace();
      }
    }

    driver = new AndroidDriver(this.getUrl(), options);
  }

  @Test
  public void sampleTest() {
    var el1 = driver.findElement(AppiumBy.xpath("(//android.widget.ImageView[@content-desc=\"Product Image\"])[3]"));
    el1.click();
    driver.executeScript("mobile: pressKey", Map.ofEntries(Map.entry("keycode", 4));
    var el2 = driver.findElement(AppiumBy.androidUIAutomator("new UiSelector().resourceId(\"com.saucelabs.mydemoapp.android:id/productIV\").instance(1)"));
    el2.click();
    driver.executeScript("mobile: pressKey", Map.ofEntries(Map.entry("keycode", 187));
    var el3 = driver.findElement(AppiumBy.androidUIAutomator("new UiSelector().resourceId(\"com.google.android.apps.nexuslauncher:id/snapshot\").instance(1)"));
    el3.click();
    var el4 = driver.findElement(AppiumBy.androidUIAutomator("new UiSelector().className(\"android.view.ViewGroup\").instance(2)"));
    el4.click();
    var el5 = driver.findElement(AppiumBy.androidUIAutomator("new UiSelector().resourceId(\"com.saucelabs.mydemoapp.android:id/productIV\").instance(2)"));
    el5.click();
    var el6 = driver.findElement(AppiumBy.id("com.saucelabs.mydemoapp.android:id/productTV"));
    el6.click();
    var el7 = driver.findElement(AppiumBy.id("com.saucelabs.mydemoapp.android:id/priceTV"));
    el7.click();
  }

  @AfterEach
  public void tearDown() {
    driver.quit();
  }
}
